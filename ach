#!/usr/bin/env bash

# I use gnu everything on my mac
# see https://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/

rm_old_file() {
    local file=$1
    local timeout=$2

    if [ -f $file ]; then
        local age=$(stat --format='%Y' $file)
        local now=$(date +%s)

        echo "check file age, file: $file (age: $age), timeout: $timeout, now: $now" >&2

        if (( age < (now - $timeout) )); then
            echo "file too old, removing file $file" >&2
            rm $file
        fi
    fi
}

fetch_account_list() {
   echo "running: alks developer accounts -e" >&2
   alks developer accounts -e > $account_file
}


ensure_account_list() {
    rm_old_file "$account_file" $((60 * 60 * 24))
    if [ ! -f $account_file -o ! -s $account_file ]; then
        echo "$account_file missing or empty, refreshing" >&2
        fetch_account_list
    fi
}

rm_expired_creds() {
    local file=$1

    if [ -f $file ]; then
        CREDS="$(credout $file)"
        local expiration="$(echo $CREDS | jq -r '.Expiration')"
        local expiration_ts=$(date -d "$expiration" +%s)
        local now=$(date +%s)

        echo "check expiration, file: $file, expiration: $expiration ($expiration_ts), now: $now" >&2

        if (( expiration_ts < now )); then
            echo "file too old, removing file $file" >&2
            unset CREDS
            rm $file
        fi
    fi
}

fetch_creds() {
    ensure_account_list
    echo "sourcing account file $account_file" >&2
    source $account_file

    alks_account=${ACCOUNT}_admin
    if [ ! -v "$alks_account" ]; then
        alks_account=${ACCOUNT}_labadmin
    fi
    if [ ! -v "$alks_account" ]; then
        alks_account=${ACCOUNT}_security
    fi

    echo "selected account: $alks_account" >&2
    echo "running: alks session open -a -a ${!alks_account} -o aws" >&2

    local creds=$(alks sessions open -i -a "${!alks_account}" -o aws)
    if [ "$?" -eq 0 ]; then
        echo $creds | gpg --encrypt --armor -r $ACH_GPG_RECIPIENT > $credfile 2> /dev/null
    fi
}

ensure_creds() {
    rm_expired_creds $credfile
    if [ ! -f $credfile -o ! -s $credfile ]; then
        echo "$credfile missing or empty, refreshing credentials" >&2
        fetch_creds
    fi
}

credout() {
    if [ ! -v CREDS ]; then
        echo "fetching creds from $1" >&2
        CREDS=$(cat $1 | gpg --decrypt 2>/dev/null)
    fi

    if [ -t 1 ]; then
        echo $CREDS | jq -r
    else
        echo $CREDS
    fi
}

main() {
    [ -z $ACCOUNT ] && {
        echo "error: no account selected"
        exit 1
    }
    # NOTE: in bash, local are available inside the function being called (yes, i know...)
    local account_file=$CACHE_DIR/accounts
    local credfile=$CACHE_DIR/$ACCOUNT.json.enc
    ensure_creds
    credout $credfile
}

CACHE_DIR=${ACH_CACHE_DIR:-$HOME/.cache/ach}
[ ! -d $CACHE_DIR ] && mkdir -p $CACHE_DIR
LOCK=${ACH_LOCK_FILE:-$CACHE_DIR/lock}

ACCOUNT=${1:-$AWS_PROFILE}

(
    echo "--------------- $(date) ----------------" >> $CACHE_DIR/log
    flock -x -w 30 200 || {
        echo "Failed to obtain lock" 1>&2
        exit 1
    }
    main 2>> $CACHE_DIR/log
    echo >> $CACHE_DIR/log
) 200>$LOCK
